using ConnectionToDataBase.Data;
using ConnectionToDataBase.Model;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace ConnectionToDataBase.Controllers
{
	[ApiController]
	[Route("api/[controller]")]
	public class ContactsController : Controller
	{
		private readonly ContactsAPIDBContext dbContext;

		public ContactsController(ContactsAPIDBContext dbContext)
		{
			this.dbContext = dbContext;
		}

		[HttpGet]
		public async Task<IActionResult> GetContacts()
		{
			return Ok(await dbContext.Contacts.ToListAsync());
		}

		[HttpGet]
		[Route("{id:guid}")]
		public async Task<IActionResult> GetContact([FromRoute] Guid id)
		{
			var contact = await dbContext.Contacts.FindAsync(id);
			if (contact == null)
			{
				return NotFound();
			}
			return Ok(contact);
		}
		[HttpPost]
		public async Task<IActionResult> AddContact(AddContactRequest Model)
		{

			var contact = new Contact()
			{
				Id = Guid.NewGuid(),
				FullName = Model.FullName,
				Address = Model.Address,
				Phone = Model.Phone,
				Email = Model.Email,
			};
			await dbContext.Contacts.AddAsync(contact);
			await dbContext.SaveChangesAsync();
			return Ok(contact);
		}
		[HttpPut]
		[Route("{id:guid}")]
		public async Task<IActionResult> UpdateContact([FromRoute] Guid id, UpdateContactRequest Model)
		{
			var contact = await dbContext.Contacts.FindAsync(id);
			if (contact != null)
			{
				contact.FullName = Model.FullName;
				contact.Address = Model.Address;
				contact.Phone = Model.Phone;
				contact.Email = Model.Email;
				await dbContext.SaveChangesAsync();
				return Ok(contact);
			}
			else
			{
				return NotFound();
			}
		}

		[HttpDelete]
		[Route("{id:guid}")]
		public async Task<IActionResult> DeleteContact([FromRoute] Guid id)
		{
			var contact = await dbContext.Contacts.FindAsync(id);
			if (contact != null)
			{
				dbContext.Remove(contact);
				await dbContext.SaveChangesAsync();
				return Ok(contact);
			}
			return NotFound();
			
		}
	}
}
